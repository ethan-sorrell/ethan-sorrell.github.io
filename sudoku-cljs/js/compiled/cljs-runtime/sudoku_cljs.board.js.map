{"version":3,"sources":["sudoku_cljs/board.cljs"],"mappings":"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","names":["sudoku-cljs.board/get-coord","row","col","cljs.core/List","sudoku-cljs.board/get-xy","coord","row-char","cljs.core.get.cljs$core$IFn$_invoke$arity$2","col-char","js/parseInt","sudoku-cljs.board/row-peers","vec__52594","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","row-n","col-n","iter__4523__auto__","s__52598","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__52600","cljs.core/chunk-buffer","i__52599","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__52597","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core.range.cljs$core$IFn$_invoke$arity$2","sudoku-cljs.board/col-peers","vec__52614","s__52618","b__52620","i__52619","iter__52617","sudoku-cljs.board/square-peers","vec__52630","col-3","cljs.core/quot","row-3","start-col","start-row","s__52634","xs__6292__auto__","iterys__4519__auto__","s__52636","b__52638","i__52637","iter__52635","fs__4520__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__52633","sudoku-cljs.board/all-peers","p1__52645#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","sudoku-cljs.board/neighborhood-peers","type","G__52648","cljs.core/Keyword","js/Error","sudoku-cljs.board/get-row","matrix","p1__52649#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","sudoku-cljs.board/get-square","p1__52655#","sudoku-cljs.board/get-col","p1__52656#","sudoku-cljs.board/get-neighborhood","G__52660","sudoku-cljs.board/coord-set","s__52662","s__52664","b__52666","i__52665","iter__52663","iter__52661","x","y","sudoku-cljs.board/unconstrained-board","cljs.core.into.cljs$core$IFn$_invoke$arity$2","p1__52685#","cljs.core/PersistentVector","cljs.core/chunk-first"],"sourcesContent":["(ns sudoku-cljs.board\n  (:require\n   [clojure.string :as string]))\n\n;; board functions\n(defn get-coord [row col]\n  \"take 1-indexed row, col and give coordinate string\n   e.g. 1 1 -> a1\"\n  (list col row))\n\n(defn get-xy [coord]\n  \"take coordinate string, give 1-indexed [row col]\"\n  (let [row-char (get coord 0)\n        col-char (get coord 1)\n        row (- (.charCodeAt row-char 0) 96)\n        col (js/parseInt col-char 10)]\n    [row col]))\n\n(defn row-peers [coord]\n  (let [[row-n col-n] coord]\n    (for [col (range 1 10)]\n      (list row-n col))))\n\n(defn col-peers [coord]\n  (let [[row-n col-n] coord]\n    (for [row (range 1 10)]\n      (list row col-n))))\n\n(defn square-peers [coord]\n  (let [[row-n col-n] coord\n        col-3 (quot (dec col-n) 3)\n        row-3 (quot (dec row-n) 3)\n        start-col (inc (* 3 col-3))\n        start-row (inc (* 3 row-3))]\n    (for [row (range start-row (+ start-row 3))\n          col (range start-col (+ start-col 3))]\n      (list row col))))\n\n(defn all-peers [coord]\n   (remove #(= % coord)\n           (concat (square-peers coord)\n                   (col-peers coord)\n                   (row-peers coord))))\n\n(defn neighborhood-peers [type]\n  (case type\n    :row row-peers\n    :col col-peers\n    :square square-peers))\n\n(defn get-row [matrix coord]\n  (map #(get matrix %) (row-peers coord)))\n\n(defn get-square [matrix coord]\n  (map #(get matrix %) (square-peers coord)))\n\n(defn get-col [matrix coord]\n  (map #(get matrix %) (col-peers coord)))\n\n(defn get-neighborhood [matrix coord type]\n  (case type\n    :row (get-row matrix coord)\n    :col (get-col matrix coord)\n    :square (get-square matrix coord)))\n\n(def coord-set\n  (for [x (range 1 10)\n        y (range 1 10)\n        :let [coord (list x y)]]\n    coord))\n\n(def unconstrained-board\n  (into\n   {}\n   (map #(vector % \"123456789\") coord-set)))\n\n"]}