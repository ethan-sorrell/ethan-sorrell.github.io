{"version":3,"sources":["sudoku_cljs/subs.cljs"],"mappings":";;;;AAKA,AAAAA,AAAA;AAAAC,AAEC;AAAAE,AAAKG;AAAL,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAASG;AAAT,AAAAF,AAAAD,AAAA,AAAA,AAAWI;AAAX,AACE,AAACF,AAAAA,AAAAA,AAAGE,AAAAA;;;AAHP,AAAA,AAAAR,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;AAKD,AAAAO,AAAA;AAAAC,AAEC;AAAKJ,AAAGC;AAAR,AACED;;;AAHH,AAAA,AAAAG,AAAAC,AAAAD,AAAAC,AAACR,AAAAA,AAAAA;AAKD,AAAAS,AAAA;AAAAC,AAEC;AAAKN,AAAGC;AAAR,AACE,AAAAM,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACP,AAAAA,AAAAA;;;AAHJ,AAAA,AAAAK,AAAAC,AAAAD,AAAAC,AAACV,AAAAA,AAAAA","names":["G__52952","G__52953","re-frame.core/reg-sub","p__52954","vec__52955","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","db","_","pos","G__52963","G__52964","G__52965","G__52966","G__52967"],"sourcesContent":["(ns sudoku-cljs.subs\n  (:require\n   [re-frame.core :as re-frame]\n   [sudoku-cljs.board :as board]))\n\n(re-frame/reg-sub\n ::cell\n (fn [db [_ pos]]\n   (db pos)))\n\n(re-frame/reg-sub\n ::db\n (fn [db _]\n   db))\n\n(re-frame/reg-sub\n ::invalid\n (fn [db _]\n   (db :invalid-cells)))\n\n#_(re-frame/reg-sub\n ::board\n (dissoc)\n (fn [db]\n   (select-keys\n    db\n    (for [x (range 1 10)\n          y (range 1 10)]\n      (list x y)))))\n"]}