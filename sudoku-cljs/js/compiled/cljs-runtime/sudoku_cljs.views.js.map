{"version":3,"sources":["sudoku_cljs/views.cljs"],"mappings":"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","names":["sudoku-cljs.views/board-change","pos","event","G__40741","re-frame.core/dispatch","sudoku-cljs.views/cell-field","x","y","horiz","vert","p1__40742#","cljs.core/List","cljs.core/deref","sudoku-cljs.rules/conflicting-pos?","G__40743","re-frame.core/subscribe","sudoku-cljs.views/table-row","col","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4523__auto__","s__40749","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__40751","cljs.core/chunk-buffer","i__40750","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__40748","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core.range.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/rem","cell-row","sudoku-cljs.views/extract-board","db","p1__40752#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","sudoku-cljs.board/coord-set","sudoku-cljs.views/output-cell","board","coord","constraint-string","cljs.core.get.cljs$core$IFn$_invoke$arity$2","constraints","js/parseInt","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","item","p1__40753#","cljs.core/some","sudoku-cljs.views/output-row","row-n","s__40756","b__40758","i__40757","iter__40755","sudoku-cljs.views/output-table","cljs.core.into.cljs$core$IFn$_invoke$arity$1","s__40760","b__40762","i__40761","iter__40759","row","sudoku-cljs.views/draw-output","sudoku-cljs.solve/constrain-board","sudoku-cljs.views/input-table","s__40764","b__40766","i__40765","iter__40763","sudoku-cljs.views/output-panel","G__40767","sudoku-cljs.views/show-db","G__40769","sudoku-cljs.views/show-invalids","G__40771","sudoku-cljs.views/main-panel","cljs.core/chunk-first"],"sourcesContent":[";; all of the markup that forms our page\n(ns sudoku-cljs.views\n  (:require\n   [re-frame.core :as re-frame]\n   [sudoku-cljs.subs :as subs]\n   [sudoku-cljs.board :as board]\n   [sudoku-cljs.rules :as rules]\n   [sudoku-cljs.solve :as solve]\n   [sudoku-cljs.events :as events]))\n\n(defn board-change\n  [pos event]\n  (re-frame/dispatch [::events/board pos (-> event .-target .-value)]))\n\n(defn cell-field\n  [x y horiz vert]\n  \"hiccup markup for sudoku input cell\"\n  (let [pos (list y x)]\n    [:td\n     {:class [(when horiz \"horiz\") (when vert \"vert\")\n              (when (rules/conflicting-pos?\n                     pos\n                     @(re-frame/subscribe [::subs/invalid]))\n                \"invalid\")]}\n     [:input\n      {:type \"text\"\n       :name pos\n       :on-blur #(when % (board-change pos %))\n       :size 1}]]))\n\n(defn table-row [col]\n  \"hiccup markup for row of sudoku input table\"\n  (letfn [(cell-row [horiz vert]\n            (into\n             [:tr]\n             (for [x (range 1 10)]\n               (if (= (rem x 3) 0)\n                 (cell-field x col horiz 1)\n                 (cell-field x col horiz vert)))))]\n    (if (= (rem col 3) 0)\n      [cell-row 1 nil]\n      [cell-row nil nil])))\n\n(defn extract-board [db]\n  \"extracts only the board cells from the state db\"\n  (map #(vector % (db %)) board/coord-set)\n  #_(map db board/coord-set))\n\n(defn output-cell [board coord horiz vert]\n  [:td\n   {:class [(when horiz \"horiz\")\n            (when vert \"vert\")]}\n   (let [constraint-string (get board coord)\n         constraints (map js/parseInt constraint-string)]\n     [:div\n      (filter (fn [item] (some #(= % item) constraints)) (range 1 10))\n      ]\n     #_(for [n (range 1 10)]\n       [:div\n        {:class [(when (contains? constraints n) \"valid\")]}\n        #_(str n)\n        (when (some #(= % n) constraints)\n              (str n))]))])\n\n(defn output-row [board row-n]\n  (let [horiz (when (= (rem row-n 3) 0) true)]\n    (into\n     [:tr]\n     (for [x (range 1 10)\n           :let [coord (list row-n x)]]\n       (output-cell board coord horiz (when (= (rem x 3) 0) true))))))\n\n(defn output-table [board]\n  [:div\n   [:table {:border \"2px solid;\"}\n    (into\n     [:tbody\n      (for [row (range 1 10)]\n        [output-row board row])])]])\n\n(defn draw-output [db]\n   (-> db\n       (extract-board)\n       (solve/constrain-board)\n       (output-table)\n       #_(str)))\n\n(defn input-table []\n  \"hiccup markup for sudoku input table\"\n  [:div\n   [:table {:border \"2px solid;\"}\n    (into\n     [:tbody]\n     (for [y (range 1 10)]\n       [table-row y]))]])\n\n(defn output-panel []\n  [:div\n   [draw-output @(re-frame/subscribe [::subs/db])]])\n\n(defn show-db []\n  [:div\n   [:p\n    (str @(re-frame/subscribe [::subs/db]))]])\n\n(defn show-invalids []\n  [:div\n   [:p\n    (str @(re-frame/subscribe [::subs/invalid]))]])\n\n(defn main-panel []\n  \"page for input table\"\n  [:div\n   [:div.row\n    [:div.column\n     [input-table]]\n    [:div#solnboard.column\n     [output-panel]]]\n   [show-db]\n   [show-invalids]])\n"]}